# git-cliff configuration for Morphomatic

[changelog]
header = """
# Changelog
"""
body = """
## [{{ version | default(value="Unreleased") }}] - {{ timestamp | default(value=now()) | date(format="%Y-%m-%d") }}
{% if commits | length == 0 -%}
_No changes_
{%- else -%}
{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | upper_first }}
{% for commit in commits %}
- {%- if commit.scope -%}{{ commit.scope }}: {% endif -%}{{ commit.message | split(pat="\\n") | first | upper_first }} ([{{ commit.id | truncate(length=7) }}](https://github.com/eyolas/Morphomatic/commit/{{ commit.id }}))
{% endfor %}
{% endfor %}
{%- endif %}
"""
trim = true
footer = """

---
"""

[git]
tag_pattern = "v[0-9]*"
conventional_commits = true
filter_unconventional = false

commit_parsers = [
  # --- Put the most specific rules first ---

  # Dev/Debug (match BEFORE fixes)
  { message = "(\\bdebug\\b|\\blog(ging)?\\b|\\bdump\\b|\\bprobe\\b)", group = "Dev/Debug" },

  # Features
  { message = "^feat",                                 group = "Features" },
  { message = "^(add|introduc|implement|enable)\\b",   group = "Features" },

  # Fixes
  { message = "^fix",                                  group = "Fixes" },
  { message = "(\\bbug\\b|hotfix|regress(ion)?)",      group = "Fixes" },

  # Performance
  { message = "^perf",                                 group = "Performance" },

  # Refactoring
  { message = "^refactor",                             group = "Refactoring" },
  { message = "(refactor|cleanup|simplif(y|ication)?|rework)", group = "Refactoring" },

  # Documentation
  { message = "^docs",                                 group = "Documentation" },
  { message = "(readme|changelog|doc[s]?)",            group = "Documentation" },

  # Style / Formatting
  { message = "^style",                                group = "Style" },
  { message = "(format|lint|luacheck|stylua)",         group = "Style" },

  # Tests
  { message = "^test",                                 group = "Tests" },

  # Build / Deps / Packaging
  { message = "^build",                                group = "Build" },
  { message = "(deps|dependency|library|lib|pkgmeta)", group = "Build" },

  # CI
  { message = "^ci",                                   group = "CI" },
  { message = "(workflow|actions|pipeline|ci)",        group = "CI" },

  # Fallback
  { message = ".*",                                    group = "Other" },
]

sort_commits = "newest"
